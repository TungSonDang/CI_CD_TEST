name: CI
 
on: 
  push:
    branches: [ "main" ] # run when push is committed to the main branch
  pull_request:
    branches: [ "main" ] # run when pull is performed to the main branch
jobs:
  build_and_test:
    name: "Build and test"
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest] # we build on GitHub-provided Windows and Linux images
    runs-on: ${{ matrix.os }} # use value from the matrix
    steps:
    - name: Install dependencies (linux)
      run: sudo apt install ninja-build
      if: matrix.os == 'ubuntu-latest' # conditional, runs this step only on the Ubuntu runner

      # Windows installer
    - name: Install Ninja (windows)    # Ninja is not available in GitHub-provided images,
                                       # see https://github.com/actions/runner-images/issues/514
      run: choco install ninja         # So let's install it through Chocolatey
      if: matrix.os == 'windows-latest'
      
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.7.0'
    - uses: ilammy/msvc-dev-cmd@v1 # This action essentially calls vcvarsall.bat for the latest VS in the runner for x64
    - uses: actions/checkout@v3    # Actually check out the sources. GH Actions can run for events that may not require
                                   # sources (e.g. when someone comments on an issue)
    - name: Install Esri Runtime SDK (Linux)
      run: |
        wget -qO- "https://esrisoftware.esri.com/akdlm/software/ArcGIS_MapsSDK/200.4.0/ArcGIS_Maps_SDK_Qt_Linux64_200_4_0.tar.gz?downloadID=NA&type=NA&agolUsername=NA&receiptId=downloads.arcgis.com&__gdb__=1715907205_0d4951f63e645588fb34bfe561a22c86&ext=.gz" -O sdk.tar.gz
        gunzip sdk.tar.gz
        tar xvf sdk.tar -C /opt
        cd /opt/ArcGIS_Maps_SDK_Qt_Linux64
        ./Setup -s -d /home/runner/work/CI_CD_TEST/CI_CD_TEST
        # cd ..
        # ./arcgis/maps_sdk/qt200.4.0/tools/postInstall.sh
        # ls
        # echo "ArcGISRuntime_INSTALL_DIR=/opt/arcgis" >> $GITHUB_ENV
      if: matrix.os == 'ubuntu-latest'

    - name: Print environment variables (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: printenv
      shell: bash

    - name: List directories (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: ls -l /opt
      shell: bash


    - name: Install Esri Runtime SDK (Windows)
      run: |
        Invoke-WebRequest -Uri "https://esrisoftware.esri.com/akdlm/software/ArcGIS_MapsSDK/200.4.0/ArcGIS_Maps_SDK_Qt_Windows_200_4_0.exe?downloadID=NA&type=NA&agolUsername=NA&receiptId=downloads.arcgis.com&__gdb__=1715907236_84ce7a4e6a72ffce2d4a1158ad811922&ext=.exe" -OutFile "Esri_Runtime_SDK.exe"
        Start-Process -FilePath "Esri_Runtime_SDK.exe" -ArgumentList '/S', '/NCRC' -NoNewWindow -Wait
        echo "ESRI_SDK_PATH=C:\Esri" | Out-File -Append -Encoding ASCII $env:GITHUB_ENV
      if: matrix.os == 'windows-latest'

     
      
    # Download and put the FluentUI to the compiler 
    # - name: Download and configure external libraries
    #   run: |
    #     if (${{ matrix.os == 'windows-latest' }}) {
    #       New-Item -ItemType Directory -Force -Path "${{ runner.temp }}/Qt/6.7.0/msvc2019_64/qml/YourLibrary"
    #       Invoke-WebRequest "https://example.com/yourlibrary.dll" -OutFile "${{ runner.temp }}/Qt/6.7.0/msvc2019_64/qml/YourLibrary/yourlibrary.dll"
    #     } else {
    #       mkdir -p ${{ runner.temp }}/Qt/6.7.0/gcc_64/qml/YourLibrary
    #       wget -O ${{ runner.temp }}/Qt/6.7.0/gcc_64/qml/YourLibrary/yourlibrary.so "https://example.com/yourlibrary.so"
    #     }

    # Here we call CMake manually, there are solutions for that in the Marketplace: https://github.com/marketplace/actions/run-cmake
    - name: Build
      # We don't need to set up the environment variable for CMake to see Qt because the install-qt-action
      # sets up the necessary variables automatically
      run: cmake -S . -B build -G "Ninja Multi-Config" && cmake --build build --config Debug

    # Save the Artifacts
    # - name: Upload Artifacts
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: ${{ matrix.os }}-artifacts
    #     path: .build/
    
    # Release the code
    # - name: MakeRelease
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ github.ref }}
    #     release_name: Release ${{ github.ref }}
    #     draft: false
    #     prerelease: false

    # Send message to a slack channel
    # - name: Notify Slack
    #   uses: slackapi/slack-github-action@v1.15.0
    #   with:
    #     slack-message: 'Build ${{ github.run_number }} completed successfully!'
    #     slack-channel-id: 'CXXXXXX'
    #     slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
